{"ast":null,"code":"var _jsxFileName = \"/home/samp/dev/practice-tracker/practice-tracker/src/Grid.js\";\nimport React, { useState } from 'react';\nimport ReactDataGrid from 'react-data-grid';\nimport 'react-data-grid/dist/react-data-grid.css';\nimport { NewItemButton, NewDateButton } from './Buttons.js';\nconst originalColumn = {\n  key: \"item\",\n  name: \"Item\",\n  editable: true\n}; // const rows = [\n//     { item: \"Klose\", \"05.07\": 100 },\n//     { item: \"scales\", \"05.07\": 200 }\n// ];\n\nconst Grid = () => {\n  let [dates, setDates] = useState([]);\n  let [items, setItems] = useState([]);\n  let columns = [...dates];\n  columns.unshift(originalColumn);\n\n  let addRow = () => {\n    const item = prompt(\"New Item: \");\n    let newRow = {\n      item: item\n    };\n    let newItems = [...items];\n    newItems.push(newRow);\n    setItems(newItems);\n  };\n\n  const addCol = () => {\n    const date = prompt(\"New Date: \");\n    let newCol = {\n      key: date,\n      name: date,\n      editable: true\n    };\n    let newCols = [...dates];\n    newCols.push(newCol);\n    setDates(newCols);\n  };\n\n  let newItem = NewItemButton({\n    addRow\n  });\n  let newDate = NewDateButton({\n    addCol\n  });\n\n  const handleGridRowsUpdated = ({\n    fromRow,\n    toRow,\n    updated\n  }) => {\n    console.log(\"hi\");\n    console.log(fromRow);\n    console.log(toRow);\n    console.log(updated);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ReactDataGrid, {\n    columns: columns,\n    rows: items,\n    rowsCount: items.length,\n    onGridRowsUpdated: handleGridRowsUpdated,\n    enableCellSelect: true,\n    minHeight: 150,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }), newItem, newDate);\n};\n\nexport default Grid;","map":{"version":3,"sources":["/home/samp/dev/practice-tracker/practice-tracker/src/Grid.js"],"names":["React","useState","ReactDataGrid","NewItemButton","NewDateButton","originalColumn","key","name","editable","Grid","dates","setDates","items","setItems","columns","unshift","addRow","item","prompt","newRow","newItems","push","addCol","date","newCol","newCols","newItem","newDate","handleGridRowsUpdated","fromRow","toRow","updated","console","log","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAO,0CAAP;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,cAA7C;AAGA,MAAMC,cAAc,GAAG;AAAEC,EAAAA,GAAG,EAAE,MAAP;AAAeC,EAAAA,IAAI,EAAE,MAArB;AAA6BC,EAAAA,QAAQ,EAAE;AAAvC,CAAvB,C,CAEA;AACA;AACA;AACA;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAEf,MAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAhC;AACA,MAAI,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAhC;AAEA,MAAIa,OAAO,GAAG,CAAC,GAAGJ,KAAJ,CAAd;AACAI,EAAAA,OAAO,CAACC,OAAR,CAAgBV,cAAhB;;AAEA,MAAIW,MAAM,GAAG,MAAM;AACf,UAAMC,IAAI,GAAGC,MAAM,CAAC,YAAD,CAAnB;AACA,QAAIC,MAAM,GAAG;AAAEF,MAAAA,IAAI,EAAEA;AAAR,KAAb;AACA,QAAIG,QAAQ,GAAG,CAAC,GAAGR,KAAJ,CAAf;AACAQ,IAAAA,QAAQ,CAACC,IAAT,CAAcF,MAAd;AACAN,IAAAA,QAAQ,CAACO,QAAD,CAAR;AACH,GAND;;AAQA,QAAME,MAAM,GAAG,MAAM;AACjB,UAAMC,IAAI,GAAGL,MAAM,CAAC,YAAD,CAAnB;AACA,QAAIM,MAAM,GAAG;AAAElB,MAAAA,GAAG,EAAEiB,IAAP;AAAahB,MAAAA,IAAI,EAAEgB,IAAnB;AAAyBf,MAAAA,QAAQ,EAAE;AAAnC,KAAb;AACA,QAAIiB,OAAO,GAAG,CAAC,GAAGf,KAAJ,CAAd;AACAe,IAAAA,OAAO,CAACJ,IAAR,CAAaG,MAAb;AACAb,IAAAA,QAAQ,CAACc,OAAD,CAAR;AACH,GAND;;AAQA,MAAIC,OAAO,GAAGvB,aAAa,CAAC;AAACa,IAAAA;AAAD,GAAD,CAA3B;AACA,MAAIW,OAAO,GAAGvB,aAAa,CAAC;AAACkB,IAAAA;AAAD,GAAD,CAA3B;;AAEA,QAAMM,qBAAqB,GAAG,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,GAAD,KAAiC;AAC3DC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACH,GALD;;AAOA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,aAAD;AACI,IAAA,OAAO,EAAEjB,OADb;AAEI,IAAA,IAAI,EAAEF,KAFV;AAGI,IAAA,SAAS,EAAEA,KAAK,CAACsB,MAHrB;AAII,IAAA,iBAAiB,EAAEN,qBAJvB;AAKI,IAAA,gBAAgB,EAAE,IALtB;AAMI,IAAA,SAAS,EAAE,GANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EASKF,OATL,EAUKC,OAVL,CADJ;AAeH,CAjDD;;AAmDA,eAAelB,IAAf","sourcesContent":["import React, { useState } from 'react';\nimport ReactDataGrid from 'react-data-grid';\nimport 'react-data-grid/dist/react-data-grid.css';\nimport { NewItemButton, NewDateButton } from './Buttons.js';\n\n\nconst originalColumn = { key: \"item\", name: \"Item\", editable: true };\n\n// const rows = [\n//     { item: \"Klose\", \"05.07\": 100 },\n//     { item: \"scales\", \"05.07\": 200 }\n// ];\n\nconst Grid = () => {\n\n    let [dates, setDates] = useState([]);\n    let [items, setItems] = useState([]);\n\n    let columns = [...dates];\n    columns.unshift(originalColumn);    \n\n    let addRow = () => {\n        const item = prompt(\"New Item: \");\n        let newRow = { item: item };\n        let newItems = [...items];\n        newItems.push(newRow);\n        setItems(newItems);\n    };\n\n    const addCol = () => {\n        const date = prompt(\"New Date: \");\n        let newCol = { key: date, name: date, editable: true };\n        let newCols = [...dates];        \n        newCols.push(newCol);\n        setDates(newCols);\n    };\n\n    let newItem = NewItemButton({addRow});\n    let newDate = NewDateButton({addCol});\n\n    const handleGridRowsUpdated = ({ fromRow, toRow, updated }) => {\n        console.log(\"hi\");\n        console.log(fromRow);\n        console.log(toRow);\n        console.log(updated);\n    }\n\n    return (\n        <div>\n            <ReactDataGrid\n                columns={columns}\n                rows={items}\n                rowsCount={items.length}\n                onGridRowsUpdated={handleGridRowsUpdated}\n                enableCellSelect={true}\n                minHeight={150}\n            />\n            {newItem}\n            {newDate}  \n        </div>\n        \n    )\n}\n\nexport default Grid;"]},"metadata":{},"sourceType":"module"}